import numpy 
from PIL import Image
import networkx as nx
from pathfinding.core.diagonal_movement import DiagonalMovement
from pathfinding.core.grid import Grid
from pathfinding.finder.a_star import AStarFinder
from pathfinding.finder.dijkstra import DijkstraFinder
from pathfinding.finder.best_first import BestFirst
from pathfinding.finder.ida_star import IDAStarFinder
from pathfinding.finder.bi_a_star import BiAStarFinder
from pathfinding.finder.breadth_first import BreadthFirstFinder

from matplotlib import pyplot
from scipy.sparse.csgraph import shortest_path
from numba import njit, jit, prange
import math
# from navigation.utilities.astar import astar

import pyastar
import time
from scipy.ndimage.filters import gaussian_filter
# import cv2

@njit()
def remap(value, old_min, old_max, new_min, new_max):
    old_range = (old_max - old_min)
    new_range = (new_max - new_min)
    return (((value - old_min)*new_range)/old_range)+new_min

@njit
def fix_scores(array, elevation : numpy.ndarray):
    min_elevation = elevation.min()
    max_elevation = elevation.max()

    for x in prange(array.shape[0]):
        for y in prange(array.shape[1]):
            if array[x][y] == 0.0:
                array[x][y] = 1 + ( elevation[x][y])
            if array[x][y] == 500:
                array[x][y] = 500
            if array[x][y] == 700:
                elevation_alpha = remap(elevation[x][y], min_elevation, max_elevation, 0.0, 1.0)
                elevation_alpha = math.pow(math.pow(elevation_alpha, 0.25)*1.5, 4)
                elevation_value = remap(elevation_alpha, 0.0, 1.0, min_elevation, max_elevation)
                array[x][y] = 700 + elevation_value 

@njit
def flip_scorecard(array, new_array):
    for x in prange(array.shape[0]):
        for y in prange(array.shape[1]):
            v = new_array.shape[1]-1
            new_array[y][x] = array[x][y]
    
            

def get_path(predecessors, i, j):
    path = [j]
    k = j
    while predecessors[i, k] != -9999:
        path.append(predecessors[i,k ])
        k = predecessors[i, k]
    return path[::-1]

def get_valid_point_in_radius(arr, x, y, radius: float = 10.0):
    offsets = [(-1, 0), (1, 0), (-1, -1), (1, -1), (-1, 1), (1, 1), (0, -1), (0, 1)]
    found = False
    # final
    final_pos = [0,0]
    for g in range(1, int(radius)):
        for offset in offsets:
            i = y+(offset[1]*g)
            j = x+(offset[0]*g)
            if arr[i][j] != 0:
                found = True
                final_pos = [j, i]
                break
        if found:
            break
    return final_pos
    #return (final_pos[1], final_pos[0])

def get_path_to(start, end):
    with open("./models/Project/BF3 Bots 0.0.4/Level/XP1_004/elevation.npy", "rb") as f:
        elevation = numpy.load(f)
    with open("./models/Project/BF3 Bots 0.0.4/Level/XP1_004/data.npy", "rb") as f:
        arr = numpy.load(f)
        fix_scores(arr, elevation)
        # new_arr = numpy.zeros(arr.shape)
        # flip_scorecard(arr, new_arr)
        arr = new_arr
        arr = arr.astype(numpy.float32)
        path = pyastar.astar_path(arr, (344, 601),  get_valid_point_in_radius(arr, 353, 631), allow_diagonal=True)


with open("./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/elevation.npy", "rb") as f:
    elevation = numpy.load(f)[0]

with open("./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/data.npy", "rb") as f:
    with open('./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/df.npy', 'rb') as fx:
        elevation_arr = numpy.load(fx)[1]
        elevation_arr = numpy.power(elevation_arr, 0.2)
        elevation_arr = numpy.max(elevation_arr) - elevation_arr
        elevation_arr = numpy.power(elevation_arr, 4.5)
    with open('./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/costs.npy', 'rb') as fx:
        costs_arr = numpy.load(fx)[1]
    arr = numpy.load(f)[0]
    new_arr = numpy.zeros(arr.shape)
    print(new_arr.shape, arr.shape)
    fix_scores(arr, elevation)
    # flip_scorecard(arr, new_arr)
    # arr = new_arr
    # print(arr.transpose())
    
    arr = arr.astype(numpy.float32)
    #arr = gaussian_filter(arr, sigma=1.0).astype(numpy.int32)
    print("finding path")
    # 703 828
    #print(arr[703][828])
    print(arr[828][704])
    #print(arr)
    ts = time.time()
    #path = pyastar.astar_path(arr, (749, 814),  get_valid_point_in_radius(arr, 700, 757), False)
    #path = pyastar.astar_path(arr, (601, 344),  get_valid_point_in_radius(arr, 632, 353), allow_diagonal=False)
    #path = pyastar.astar_path(arr, (353, 659),  get_valid_point_in_radius(arr, 341, 591), allow_diagonal=True)
    #path = pyastar.astar_path(arr, (684, 397),  get_valid_point_in_radius(arr, 658, 444), allow_diagonal=False)
    # path = pyastar.astar_path(arr, (745, 528),  get_valid_point_in_radius(arr, 848, 596), allow_diagonal=True)
    path = pyastar.astar_path(arr, (1100, 924 ),  get_valid_point_in_radius(arr, 1044, 938 ), allow_diagonal=True)

    te = time.time()
    print(te - ts)
    
    print(path)

    # print(arr[432,585])
    # grid = Grid(matrix=arr)
    # start = grid.node(749, 814) #grid.node(864, 793) #grid.node(688, 855)
    # calc_end = get_valid_point_in_radius(arr, 669, 740)
    # end   = grid.node(*calc_end) #grid.node(864, 700) #grid.node(793, 807)
    # print("Running pathfinder")
    # ts = time.time()
    # finder = AStarFinder(diagonal_movement=DiagonalMovement.always, weight=1.0)
    # path , runs = finder.find_path(start, end, grid)
    # te = time.time()
    # print("Done", te-ts)
    path = [(652, 1149, 1),(652, 1150, 1),(651, 1150, 1),(651, 1151, 1),(651, 1152, 1),(651, 1153, 1),(651, 1154, 1),(651, 1155, 1),(651, 1156, 1),(651, 1157, 1),(651, 1158, 1),(650, 1158, 1),(650, 1159, 1),(650, 1160, 1),(650, 1161, 1),(649, 1161, 1),(649, 1162, 1),(649, 1163, 1),(649, 1164, 1),(648, 1164, 1),(648, 1165, 1),(647, 1165, 1),(646, 1165, 1),(646, 1166, 1),(645, 1166, 1),(644, 1166, 1),(643, 1166, 1),(643, 1167, 1),(642, 1167, 1),(642, 1168, 1),(641, 1168, 1),(640, 1168, 1),(639, 1168, 1),(638, 1168, 1),(637, 1168, 1),(637, 1169, 1),(636, 1169, 1),(635, 1169, 1),(634, 1169, 1),(633, 1169, 1),(632, 1169, 1),(631, 1169, 1),(631, 1168, 1),(630, 1168, 1),(629, 1168, 1),(628, 1168, 1),(628, 1167, 1),(627, 1167, 1),(626, 1167, 1),(625, 1167, 1),(625, 1166, 1),(624, 1166, 1),(623, 1166, 1),(622, 1166, 1),(622, 1165, 1),(622, 1164, 1),(622, 1163, 1),(621, 1163, 1),(621, 1162, 1),(620, 1162, 1),(619, 1162, 1),(619, 1161, 1),(618, 1161, 1),(617, 1161, 1),(616, 1161, 1),(616, 1160, 1),(616, 1159, 1),(616, 1158, 1),(615, 1158, 1),(615, 1157, 1),(615, 1156, 1),(615, 1155, 1),(616, 1155, 1),(616, 1154, 1),(616, 1153, 1),(616, 1152, 1),(617, 1152, 1),(618, 1152, 1),(618, 1151, 1),(618, 1150, 1),(618, 1149, 1),(618, 1148, 1),(618, 1147, 1),(618, 1146, 1),(618, 1145, 1),(618, 1144, 1),(617, 1144, 1),(616, 1144, 1),(616, 1143, 1),(615, 1143, 1),(614, 1143, 1),(613, 1143, 1),(613, 1142, 1),(613, 1141, 1),(613, 1140, 1),(612, 1140, 1),(612, 1139, 1),(612, 1138, 1),(613, 1138, 1),(613, 1137, 1),(613, 1136, 1),(613, 1135, 1),(614, 1135, 1),(614, 1134, 1),(615, 1134, 1),(615, 1133, 1),(615, 1132, 1),(615, 1131, 1),(616, 1131, 1),(616, 1130, 1),(617, 1130, 1),(618, 1130, 1),(619, 1130, 1),(619, 1129, 1),(620, 1129, 1),(621, 1129, 1),(622, 1129, 1),(622, 1128, 1),(623, 1128, 1),(624, 1128, 1),(625, 1128, 1),(625, 1127, 1),(625, 1126, 1),(626, 1126, 1),(626, 1125, 1),(626, 1124, 1),(625, 1124, 1),(625, 1123, 1),(625, 1122, 1),(625, 1121, 1),(625, 1120, 1),(625, 1119, 1),(624, 1119, 1),(624, 1118, 1),(623, 1118, 1),(622, 1118, 1),(621, 1118, 1),(620, 1118, 1),(620, 1117, 1),(620, 1116, 1),(619, 1116, 1),(618, 1116, 1),(617, 1116, 1),(616, 1116, 1),(615, 1116, 1),(614, 1116, 1),(614, 1115, 1),(613, 1115, 1),(613, 1114, 1),(613, 1113, 1),(613, 1112, 1),(613, 1111, 1),(612, 1111, 1),(612, 1110, 1),(612, 1109, 1),(612, 1108, 1),(612, 1107, 1),(612, 1106, 1),(612, 1105, 1),(612, 1104, 1),(612, 1103, 1),(612, 1102, 1),(612, 1101, 1),(612, 1100, 1),(613, 1100, 1),(613, 1099, 1),(613, 1098, 1),(613, 1097, 1),(614, 1097, 1),(614, 1096, 1),(615, 1096, 1),(615, 1095, 1),(615, 1094, 1),(615, 1093, 1),(615, 1092, 1),(615, 1091, 1),(615, 1090, 1),(615, 1089, 1),(615, 1088, 1),(615, 1087, 1),(615, 1086, 1),(615, 1085, 1),(615, 1084, 1),(615, 1084, 2),(614, 1084, 2),(613, 1084, 2),(613, 1083, 2),(613, 1082, 2),(613, 1081, 2),(613, 1080, 2),(613, 1079, 2),(613, 1079, 3),(613, 1078, 3),(613, 1077, 3),(613, 1077, 2),(612, 1077, 2),(612, 1076, 2),(612, 1075, 2),(612, 1074, 2),(612, 1073, 2),(611, 1073, 2),(610, 1073, 2),(609, 1073, 2),(608, 1073, 2),(607, 1073, 2),(607, 1074, 2),(606, 1074, 2),(605, 1074, 2),(605, 1073, 2),(604, 1073, 2),(603, 1073, 2),(602, 1073, 2),(601, 1073, 2),(600, 1073, 2),(599, 1073, 2),(598, 1073, 2),(598, 1072, 2),(597, 1072, 2),(596, 1072, 2),(595, 1072, 2),(594, 1072, 2),(593, 1072, 2),(592, 1072, 2),(591, 1072, 2),(590, 1072, 2),(589, 1072, 2),(588, 1072, 2),(587, 1072, 2),(587, 1073, 2),(586, 1073, 2),(586, 1074, 2),(585, 1074, 2),(584, 1074, 2),(584, 1073, 2),(583, 1073, 2),(582, 1073, 2),(581, 1073, 2),(580, 1073, 2),(579, 1073, 2),(578, 1073, 2),(577, 1073, 2),(576, 1073, 2),(575, 1073, 2),(575, 1072, 2),(574, 1072, 2),(574, 1071, 2),(573, 1071, 2),(573, 1070, 2),(572, 1070, 2),(572, 1069, 2),(571, 1069, 2),(570, 1069, 2),(569, 1069, 2),(568, 1069, 2),(567, 1069, 2),(566, 1069, 2),(566, 1069, 1),(565, 1069, 1),(564, 1069, 1),(563, 1069, 1),(562, 1069, 1),(561, 1069, 1),(560, 1069, 1),(560, 1068, 1),(559, 1068, 1),(558, 1068, 1),(557, 1068, 1),(556, 1068, 1),(556, 1067, 1),(556, 1066, 1),(556, 1065, 1),(555, 1065, 1),(555, 1064, 1),(555, 1063, 1),(555, 1062, 1),(555, 1061, 1),(554, 1061, 1),(553, 1061, 1),(552, 1061, 1),(552, 1060, 1),(551, 1060, 1),(551, 1059, 1),(550, 1059, 1),(549, 1059, 1),(549, 1058, 1),(549, 1057, 1),(549, 1056, 1),(549, 1055, 1),(548, 1055, 1),(547, 1055, 1),(546, 1055, 1),(546, 1054, 1),(545, 1054, 1),(544, 1054, 1),(543, 1054, 1),(542, 1054, 1),(541, 1054, 1),(540, 1054, 1),(540, 1053, 1),(539, 1053, 1),(538, 1053, 1),(537, 1053, 1),(537, 1052, 1),(536, 1052, 1),(536, 1051, 1),(535, 1051, 1),(535, 1050, 1),(534, 1050, 1),(533, 1050, 1),(532, 1050, 1),(531, 1050, 1),(530, 1050, 1),(529, 1050, 1),(528, 1050, 1),(527, 1050, 1),(527, 1051, 1),(527, 1052, 1),(526, 1052, 1),(525, 1052, 1),(524, 1052, 1),(524, 1053, 1),(524, 1054, 1),(524, 1055, 1),(523, 1055, 1),(523, 1056, 1),(523, 1057, 1),(523, 1058, 1),(523, 1059, 1),(523, 1060, 1),(523, 1061, 1),(523, 1062, 1),(523, 1063, 1),(523, 1064, 1),(523, 1065, 1),(523, 1066, 1),(523, 1067, 1),(523, 1068, 1),(523, 1069, 1),(523, 1070, 1),(523, 1071, 1),(523, 1072, 1),(523, 1073, 1),(523, 1074, 1),(523, 1075, 1),(523, 1076, 1),(523, 1077, 1),(523, 1078, 1),(523, 1079, 1),(523, 1080, 1),(523, 1081, 1),(523, 1082, 1),(523, 1083, 1),(523, 1084, 1),(523, 1085, 1),(523, 1086, 1),(523, 1087, 1),(523, 1088, 1),(523, 1089, 1),(523, 1090, 1),(524, 1090, 1),(524, 1091, 1),(524, 1092, 1),(524, 1093, 1),(524, 1094, 1),(523, 1094, 1),(522, 1094, 1),(521, 1094, 1),(521, 1095, 1),(520, 1095, 1),(519, 1095, 1),(519, 1096, 1),(519, 1097, 1),(520, 1097, 1),(521, 1097, 1),(522, 1097, 1),(523, 1097, 1),(524, 1097, 1),(525, 1097, 1),(526, 1097, 1),(527, 1097, 1),(527, 1098, 1),(527, 1099, 1),(528, 1099, 1),(529, 1099, 1),(530, 1099, 1),(530, 1100, 1),(531, 1100, 1),(532, 1100, 1),(533, 1100, 1),(533, 1101, 1),(533, 1102, 1),(533, 1103, 1),(533, 1104, 1),(533, 1105, 1),(533, 1106, 1),(532, 1106, 1),(531, 1106, 1),(530, 1106, 1),(529, 1106, 1),(528, 1106, 1),(528, 1107, 1),(528, 1108, 1),(527, 1108, 1),(526, 1108, 1),(525, 1108, 1),(524, 1108, 1),(524, 1109, 1),(524, 1110, 1),(524, 1111, 1),(523, 1111, 1),(523, 1112, 1),(523, 1113, 1),(523, 1114, 1),(522, 1114, 1),(522, 1115, 1),(522, 1116, 1),(521, 1116, 1),(521, 1117, 1),(521, 1118, 1),(521, 1119, 1),(520, 1119, 1),(520, 1120, 1),(519, 1120, 1),(519, 1121, 1),(518, 1121, 1),(518, 1122, 1),(518, 1123, 1),(518, 1124, 1),(517, 1124, 1),(517, 1125, 1),(516, 1125, 1),(516, 1126, 1),(516, 1127, 1),(516, 1128, 1),(515, 1128, 1),(515, 1129, 1),(514, 1129, 1),(514, 1130, 1),(514, 1131, 1),(514, 1132, 1),(513, 1132, 1),(513, 1133, 1),(513, 1134, 1),(513, 1135, 1),(513, 1136, 1),(513, 1137, 1),(514, 1137, 1),(514, 1138, 1),(514, 1139, 1),(514, 1140, 1),(515, 1140, 1),(515, 1141, 1),(516, 1141, 1),(517, 1141, 1),(517, 1142, 1),(518, 1142, 1),(519, 1142, 1),(520, 1142, 1),(520, 1143, 1),(521, 1143, 1),(522, 1143, 1),(523, 1143, 1),(524, 1143, 1),(525, 1143, 1),(526, 1143, 1),(527, 1143, 1),(528, 1143, 1),(529, 1143, 1),(530, 1143, 1),(531, 1143, 1),(532, 1143, 1),(532, 1144, 1),(532, 1145, 1),(531, 1145, 1),(530, 1145, 1),(529, 1145, 1),(528, 1145, 1),(527, 1145, 1),(526, 1145, 1),(525, 1145, 1),(524, 1145, 1),(523, 1145, 1),(522, 1145, 1),(521, 1145, 1),(520, 1145, 1),(519, 1145, 1),(518, 1145, 1),(517, 1145, 1),(516, 1145, 1),(515, 1145, 1),(514, 1145, 1),(513, 1145, 1),(512, 1145, 1),(511, 1145, 1),(510, 1145, 1),(509, 1145, 1),(508, 1145, 1),(507, 1145, 1),]
    if type(path) != type(None) :
        for p in path:
            elevation_arr[p[0]][p[1]] = 50*(p[2]+1)
    

    print(arr)
    image = Image.fromarray((arr*255).astype(numpy.uint8), mode="L")
    image.save("test.png")
    pyplot.imshow(elevation_arr)
    pyplot.show()