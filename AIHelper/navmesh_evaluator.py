import numpy 
from PIL import Image
import networkx as nx
from pathfinding.core.diagonal_movement import DiagonalMovement
from pathfinding.core.grid import Grid
from pathfinding.finder.a_star import AStarFinder
from pathfinding.finder.dijkstra import DijkstraFinder
from pathfinding.finder.best_first import BestFirst
from pathfinding.finder.ida_star import IDAStarFinder
from pathfinding.finder.bi_a_star import BiAStarFinder
from pathfinding.finder.breadth_first import BreadthFirstFinder

from matplotlib import pyplot
from scipy.sparse.csgraph import shortest_path
from numba import njit, jit, prange
import math
# from navigation.utilities.astar import astar

import pyastar
import time
from scipy.ndimage.filters import gaussian_filter
# import cv2

@njit()
def remap(value, old_min, old_max, new_min, new_max):
    old_range = (old_max - old_min)
    new_range = (new_max - new_min)
    return (((value - old_min)*new_range)/old_range)+new_min

@njit
def fix_scores(array, elevation : numpy.ndarray):
    min_elevation = elevation.min()
    max_elevation = elevation.max()

    for x in prange(array.shape[0]):
        for y in prange(array.shape[1]):
            if array[x][y] == 0.0:
                array[x][y] = 1 + ( elevation[x][y])
            if array[x][y] == 500:
                array[x][y] = 500
            if array[x][y] == 700:
                elevation_alpha = remap(elevation[x][y], min_elevation, max_elevation, 0.0, 1.0)
                elevation_alpha = math.pow(math.pow(elevation_alpha, 0.25)*1.5, 4)
                elevation_value = remap(elevation_alpha, 0.0, 1.0, min_elevation, max_elevation)
                array[x][y] = 700 + elevation_value 

@njit
def flip_scorecard(array, new_array):
    for x in prange(array.shape[0]):
        for y in prange(array.shape[1]):
            v = new_array.shape[1]-1
            new_array[y][x] = array[x][y]
    
            

def get_path(predecessors, i, j):
    path = [j]
    k = j
    while predecessors[i, k] != -9999:
        path.append(predecessors[i,k ])
        k = predecessors[i, k]
    return path[::-1]

def get_valid_point_in_radius(arr, x, y, radius: float = 10.0):
    offsets = [(-1, 0), (1, 0), (-1, -1), (1, -1), (-1, 1), (1, 1), (0, -1), (0, 1)]
    found = False
    # final
    final_pos = [0,0]
    for g in range(1, int(radius)):
        for offset in offsets:
            i = y+(offset[1]*g)
            j = x+(offset[0]*g)
            if arr[i][j] != 0:
                found = True
                final_pos = [j, i]
                break
        if found:
            break
    return final_pos
    #return (final_pos[1], final_pos[0])

def get_path_to(start, end):
    with open("./models/Project/BF3 Bots 0.0.4/Level/XP1_004/elevation.npy", "rb") as f:
        elevation = numpy.load(f)
    with open("./models/Project/BF3 Bots 0.0.4/Level/XP1_004/data.npy", "rb") as f:
        arr = numpy.load(f)
        fix_scores(arr, elevation)
        # new_arr = numpy.zeros(arr.shape)
        # flip_scorecard(arr, new_arr)
        arr = new_arr
        arr = arr.astype(numpy.float32)
        path = pyastar.astar_path(arr, (344, 601),  get_valid_point_in_radius(arr, 353, 631), allow_diagonal=True)


with open("./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/elevation.npy", "rb") as f:
    elevation = numpy.load(f)[0]

with open("./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/data.npy", "rb") as f:
    with open('./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/df.npy', 'rb') as fx:
        elevation_arr = numpy.load(fx)[1]
        elevation_arr = numpy.power(elevation_arr, 0.2)
        elevation_arr = numpy.max(elevation_arr) - elevation_arr
        elevation_arr = numpy.power(elevation_arr, 4.5)
    with open('./models/Project/BF3 Bots 0.0.4/Level/MP_Subway/costs.npy', 'rb') as fx:
        costs_arr = numpy.load(fx)[1]
    arr = numpy.load(f)[0]
    new_arr = numpy.zeros(arr.shape)
    print(new_arr.shape, arr.shape)
    fix_scores(arr, elevation)
    # flip_scorecard(arr, new_arr)
    # arr = new_arr
    # print(arr.transpose())
    
    arr = arr.astype(numpy.float32)
    #arr = gaussian_filter(arr, sigma=1.0).astype(numpy.int32)
    print("finding path")
    # 703 828
    #print(arr[703][828])
    print(arr[828][704])
    #print(arr)
    ts = time.time()
    #path = pyastar.astar_path(arr, (749, 814),  get_valid_point_in_radius(arr, 700, 757), False)
    #path = pyastar.astar_path(arr, (601, 344),  get_valid_point_in_radius(arr, 632, 353), allow_diagonal=False)
    #path = pyastar.astar_path(arr, (353, 659),  get_valid_point_in_radius(arr, 341, 591), allow_diagonal=True)
    #path = pyastar.astar_path(arr, (684, 397),  get_valid_point_in_radius(arr, 658, 444), allow_diagonal=False)
    # path = pyastar.astar_path(arr, (745, 528),  get_valid_point_in_radius(arr, 848, 596), allow_diagonal=True)
    path = pyastar.astar_path(arr, (1100, 924 ),  get_valid_point_in_radius(arr, 1044, 938 ), allow_diagonal=True)

    te = time.time()
    print(te - ts)
    
    print(path)

    # print(arr[432,585])
    # grid = Grid(matrix=arr)
    # start = grid.node(749, 814) #grid.node(864, 793) #grid.node(688, 855)
    # calc_end = get_valid_point_in_radius(arr, 669, 740)
    # end   = grid.node(*calc_end) #grid.node(864, 700) #grid.node(793, 807)
    # print("Running pathfinder")
    # ts = time.time()
    # finder = AStarFinder(diagonal_movement=DiagonalMovement.always, weight=1.0)
    # path , runs = finder.find_path(start, end, grid)
    # te = time.time()
    # print("Done", te-ts)
    path = [(507, 1146), (507, 1147), (507, 1148), (507, 1149), (508, 1137), (508, 1138), (508, 1139), (508, 1140), (508, 1141), (508, 1142), (508, 1143), (508, 1144), (508, 1145), (508, 1146), (508, 1147), (508, 1148), (508, 1149), (509, 1137), (509, 1138), (509, 1139), (509, 1140), (509, 1141), (509, 1142), (509, 1143), (509, 1144), (509, 1145), (509, 1146), (509, 1147), (509, 1148), (509, 1149), (510, 1137), (510, 1138), (510, 1139), (510, 1140), (510, 1141), (510, 1142), (510, 1143), (510, 1144), (510, 1145), (510, 1146), (510, 1147), (510, 1148), (510, 1149), (511, 1137), (511, 1138), (511, 1139), (511, 1140), (511, 1141), (511, 1142), (511, 1143), (511, 1144), (511, 1145), (511, 1146), (511, 1147), (511, 1148), (511, 1149), (512, 1137), (512, 1138), (512, 1139), (512, 1140), (512, 1141), (512, 1142), (512, 1143), (512, 1144), (512, 1145), (512, 1146), (512, 1147), (512, 1148), (512, 1149), (513, 1137), (513, 1138), (513, 1139), (513, 1140), (513, 1141), (513, 1142), (513, 1143), (513, 1144), (513, 1145), (513, 1146), (513, 1147), (513, 1148), (513, 1149), (514, 1137), (514, 1138), (514, 1139), (514, 1140), (514, 1141), (514, 1142), (514, 1143), (514, 1144), (514, 1145), (514, 1146), (514, 1147), (514, 1148), (514, 1149), (515, 1140), (515, 1141), (515, 1142), (515, 1143), (515, 1144), (515, 1145), (515, 1146), (515, 1147), (515, 1148), (515, 1149), (516, 1141), (516, 1142), (516, 1143), (516, 1144), (516, 1145), (516, 1146), (516, 1147), (516, 1148), (516, 1149), (517, 1141), (517, 1142), (517, 1143), (517, 1144), (517, 1145), (517, 1146), (517, 1147), (517, 1148), (517, 1149), (518, 1142), (518, 1143), (518, 1144), (518, 1145), (518, 1146), (518, 1147), (518, 1148), (518, 1149), (519, 1142), (519, 1143), (519, 1144), (519, 1145), (519, 1146), (519, 1147), (519, 1148), (519, 1149), (520, 1137), (520, 1142), (520, 1143), (520, 1144), (520, 1145), (520, 1146), (520, 1147), (520, 1148), (520, 1149), (521, 1137), (521, 1143), (521, 1144), (521, 1145), (521, 1146), (521, 1147), (521, 1148), (521, 1149), (522, 1137), (522, 1143), (522, 1144), (522, 1145), (522, 1146), (522, 1147), (523, 1135), (523, 1141), (523, 1142), (523, 1143), (523, 1144), (523, 1145), (523, 1146), (523, 1147), (524, 1142), (524, 1143), (524, 1144), (524, 1145), (524, 1146), (524, 1147), (525, 1141), (525, 1142), (525, 1143), (525, 1144), (525, 1145), (525, 1146), (525, 1151), (526, 1140), (526, 1141), (526, 1142), (526, 1143), (526, 1144), (526, 1145), (526, 1146), (526, 1151), (527, 1139), (527, 1140), (527, 1141), (527, 1142), (527, 1143), (527, 1144), (527, 1145), (527, 1146), (527, 1151), (528, 1139), (528, 1140), (528, 1141), (528, 1142), (528, 1143), (528, 1144), (528, 1145), (528, 1146), (528, 1147), (529, 1135), (529, 1136), (529, 1138), (529, 1139), (529, 1141), (529, 1142), (529, 1143), (529, 1144), (529, 1145), (529, 1146), (529, 1147), (530, 1136), (530, 1138), (530, 1141), (530, 1142), (530, 1143), (530, 1144), (530, 1145), (530, 1147), (531, 1141), (531, 1142), (531, 1143), (531, 1144), (531, 1145), (531, 1146), (531, 1147), (531, 1148), (531, 1149), (532, 1142), (532, 1143), (532, 1144), (532, 1145), (532, 1146), (532, 1147), (532, 1148), (532, 1149), (533, 1160), (537, 1148), (537, 1149), (538, 1137), (538, 1138), (538, 1139), (538, 1140), (538, 1141), (538, 1142), (538, 1143), (538, 1144), (538, 1145), (538, 1146), (538, 1147), (538, 1148), (538, 1149), (539, 1137), (539, 1138), (539, 1139), (539, 1140), (539, 1141), (539, 1142), (539, 1143), (539, 1144), (539, 1145), (539, 1146), (539, 1147), (539, 1148), (539, 1149), (540, 1137), (540, 1138), (540, 1139), (540, 1140), (540, 1141), (540, 1142), (540, 1143), (540, 1144), (540, 1145), (540, 1146), (540, 1147), (540, 1148), (540, 1149), (541, 1137), (541, 1138), (541, 1139), (541, 1140), (541, 1141), (541, 1142), (541, 1143), (541, 1144), (541, 1145), (541, 1146), (541, 1147), (541, 1148), (541, 1149), (542, 1137), (542, 1138), (542, 1139), (542, 1140), (542, 1141), (542, 1142), (542, 1143), (542, 1144), (542, 1145), (542, 1146), (542, 1147), (542, 1148), (542, 1149), (543, 1137), (543, 1138), (543, 1139), (543, 1140), (543, 1141), (543, 1142), (543, 1143), (543, 1144), (543, 1145), (543, 1146), (543, 1147), (543, 1148), (543, 1149), (544, 1137), (544, 1138), (544, 1139), (544, 1140), (544, 1141), (544, 1142), (544, 1143), (544, 1144), (544, 1145), (544, 1146), (544, 1147), (544, 1148), (544, 1149), (545, 1137), (545, 1138), (545, 1139), (545, 1140), (545, 1141), (545, 1142), (545, 1143), (545, 1144), (545, 1145), (545, 1146), (545, 1147), (545, 1148), (545, 1149), (546, 1137), (546, 1138), (546, 1139), (546, 1140), (546, 1141), (546, 1142), (546, 1143), (546, 1144), (546, 1145), (546, 1146), (546, 1147), (546, 1148), (546, 1149), (547, 1137), (547, 1138), (547, 1139), (547, 1140), (547, 1141), (547, 1142), (547, 1143), (547, 1144), (547, 1145), (547, 1146), (547, 1147), (547, 1148), (547, 1149), (548, 1137), (548, 1138), (548, 1139), (548, 1140), (548, 1141), (548, 1142), (548, 1143), (548, 1144), (548, 1145), (548, 1146), (548, 1147), (548, 1148), (548, 1149), (549, 1137), (549, 1138), (549, 1139), (549, 1140), (549, 1141), (549, 1142), (549, 1143), (549, 1144), (549, 1145), (549, 1146), (549, 1147), (549, 1148), (549, 1149), (550, 1137), (550, 1138), (550, 1139), (550, 1140), (550, 1141), (550, 1142), (550, 1143), (550, 1144), (550, 1145), (550, 1146), (550, 1147), (550, 1148), (550, 1149), (551, 1137), (551, 1138), (551, 1139), (551, 1140), (551, 1141), (551, 1142), (551, 1143), (551, 1144), (551, 1145), (551, 1146), (551, 1147), (551, 1148), (551, 1149), (552, 1137), (552, 1138), (552, 1139), (552, 1140), (552, 1141), (552, 1142), (552, 1143), (552, 1144), (552, 1145), (552, 1146), (552, 1147), (552, 1148), (552, 1149), (553, 1137), (553, 1138), (553, 1139), (553, 1140), (553, 1141), (553, 1142), (553, 1143), (553, 1144), (553, 1145), (553, 1146), (553, 1147), (553, 1148), (553, 1149), (554, 1137), (554, 1138), (554, 1139), (554, 1140), (554, 1141), (554, 1142), (554, 1143), (554, 1144), (554, 1145), (554, 1146), (554, 1147), (554, 1148), (554, 1149), (555, 1137), (555, 1138), (555, 1139), (555, 1140), (555, 1141), (555, 1142), (555, 1143), (555, 1144), (555, 1145), (555, 1146), (555, 1147), (555, 1148), (555, 1149), (556, 1137), (556, 1138), (556, 1139), (556, 1140), (556, 1141), (556, 1142), (556, 1143), (556, 1144), (556, 1145), (556, 1146), (556, 1147), (556, 1148), (556, 1149), (557, 1137), (557, 1138), (557, 1139), (557, 1140), (557, 1141), (557, 1142), (557, 1143), (557, 1144), (557, 1145), (557, 1146), (557, 1147), (557, 1148), (557, 1149), (558, 1137), (558, 1138), (558, 1139), (558, 1140), (558, 1141), (558, 1142), (558, 1143), (558, 1144), (558, 1145), (558, 1146), (558, 1147), (558, 1148), (558, 1149), (559, 1137), (559, 1138), (559, 1139), (559, 1140), (559, 1141), (559, 1142), (559, 1143), (559, 1144), (559, 1145), (559, 1146), (559, 1147), (559, 1148), (559, 1149), (560, 1137), (560, 1138), (560, 1139), (560, 1140), (560, 1141), (560, 1142), (560, 1143), (560, 1144), (560, 1145), (560, 1146), (560, 1147), (560, 1148), (560, 1149), (561, 1137), (561, 1138), (561, 1139), (561, 1140), (561, 1141), (561, 1142), (561, 1143), (561, 1144), (561, 1145), (561, 1146), (561, 1147), (561, 1148), (561, 1149), (562, 1137), (562, 1138), (562, 1139), (562, 1140), (562, 1141), (562, 1142), (562, 1143), (562, 1144), (562, 1145), (562, 1146), (562, 1147), (562, 1148), (562, 1149), (563, 1137), (563, 1138), (563, 1139), (563, 1140), (563, 1141), (563, 1142), (563, 1143), (563, 1144), (563, 1145), (563, 1146), (563, 1147), (563, 1148), (563, 1149), (564, 1137), (564, 1138), (564, 1139), (564, 1140), (564, 1141), (564, 1142), (564, 1143), (564, 1144), (564, 1145), (564, 1146), (564, 1147), (564, 1148), (564, 1149), (565, 1137), (565, 1138), (565, 1139), (565, 1140), (565, 1141), (565, 1142), (565, 1143), (565, 1144), (565, 1145), (565, 1146), (565, 1147), (565, 1148), (565, 1149), (566, 1137), (566, 1138), (566, 1139), (566, 1140), (566, 1141), (566, 1142), (566, 1143), (566, 1144), (566, 1145), (566, 1146), (566, 1147), (566, 1148), (566, 1149), (567, 1137), (567, 1138), (567, 1139), (567, 1140), (567, 1141), (567, 1142), (567, 1143), (567, 1144), (567, 1145), (567, 1146), (567, 1147), (567, 1148), (567, 1149), (568, 1137), (568, 1138), (568, 1139), (568, 1140), (568, 1141), (568, 1142), (568, 1143), (568, 1144), (568, 1145), (568, 1146), (568, 1147), (568, 1148), (568, 1149), (569, 1137), (569, 1138), (569, 1139), (569, 1140), (569, 1141), (569, 1142), (569, 1143), (569, 1144), (569, 1145), (569, 1146), (569, 1147), (569, 1148), (569, 1149), (570, 1137), (570, 1138), (570, 1139), (570, 1140), (570, 1141), (570, 1142), (570, 1143), (570, 1144), (570, 1145), (570, 1146), (570, 1147), (570, 1148), (570, 1149), (571, 1137), (571, 1138), (571, 1139), (571, 1140), (571, 1141), (571, 1142), (571, 1143), (571, 1144), (571, 1145), (571, 1146), (571, 1147), (571, 1148), (571, 1149), (572, 1137), (572, 1138), (572, 1139), (572, 1140), (572, 1141), (572, 1142), (572, 1143), (572, 1144), (572, 1145), (572, 1146), (572, 1147), (572, 1148), (572, 1149), (573, 1137), (573, 1138), (573, 1139), (573, 1140), (573, 1141), (573, 1142)]
    if type(path) != type(None) :
        for p in path:
            elevation_arr[p[0]][p[1]] = 120
    

    print(arr)
    image = Image.fromarray((arr*255).astype(numpy.uint8), mode="L")
    image.save("test.png")
    pyplot.imshow(elevation_arr)
    pyplot.show()